"""
-------------------------------------------------------
HSJ_Linked
-------------------------------------------------------
Author:
ID:
Email:
__updated__ = ""
-------------------------------------------------------

Name: The "Hop Skip Jump" Linked List Problem
Created By: Jason Van Humbeck
Package: Laurier FinTech CP164 Mock Exam - Part 1

Task Description:
    This problem involves manipulating a basic singly linked list with a twist.
    Each node in the list has a type representing the action to take when it is read:
    - "Jump": You read and output the current node.
    - "Skip": You ignore the current node and move to the next one.
    - "Hop": You read and output the next node (but do not change the index).

    For example, if the list is {Jump "Apple"} -> {Skip "Orange:"} -> {Hop "Grape"} -> {Jump "Pineapple"}:
    - RESULT: "APPLE, PINEAPPLE, PINEAPPLE"

Requirements:
    - No imported classes allowed.
    - Prohibit the use of loop breaks.
    - No illegal aids.
"""

from copy import deepcopy

class List:
    def insert(self, typ, value, i):
        """
        -------------------------------------------------------
        Inserts a new node into the list at a specified index.
        Any index of i is valid, where:
            i < 0 -> i = 0
            i > count -> i = count
        Use: lst.insert(typ, value, i)
        -------------------------------------------------------
        Parameters:
            typ - the type of the new node (int: 0 for Skip, 1 for Jump, 2 for Hop)
            value - the value of the new node (any)
            i - the index to insert the new node at (int)
        Returns:
            None
        -------------------------------------------------------
        """

        if self._count == 0:
            self._front = _Node(typ, value, None)
            self._rear = self._front
        elif i <= 0:
            self._front = _Node(typ, value, self._front)
        elif i >= (self._count):
            node = _Node(typ, value, None)
            self._rear._next = node;
            self._rear = node;
        else:
            node = self._front;
            for i in range(i-1):
                node = node._next
            new = _Node(typ, value, node._next)
            node._next = new

        self._count += 1

    def remove_skip (self):
        """
        -------------------------------------------------------
        Removes all Skip nodes from the list and returns the values removed.
        Use: removed = lst.remove_skip()
        -------------------------------------------------------
        Returns:
            removed - the concatenated values of all Skip nodes removed (str)
        -------------------------------------------------------
        """
        removed = ""
        prev = None
        node = self._front

        while node is not None:
            if node._type == 0:
                removed += node._value
                if self._count == 1:
                    self._front = None
                    self._rear = None
                elif node._next is None:
                    self._rear = prev
                    prev._next = None
                elif prev is None:
                    self._front = self._front._next
                else:
                    prev._next = node._next
                self._count -= 1
            prev = node
            node = node._next

        return removed

    def export (self):
        """
        -------------------------------------------------------
        Creates a string using the rules and guidelines of
        "Hop, Skip, Jump" and returns it
        Use: exp = lst.export()
        -------------------------------------------------------
        Returns:
            exp - a string containing the concatenated values of all Jump and Hop nodes (str)
        -------------------------------------------------------
        """
        exp = ""
        node = self._front
        while node != None:
            if node._type == 1:
                exp += deepcopy(node._value)
            elif node._type == 2 and node._next != None:
                exp += deepcopy(node._next._value)
            node = node._next
        return exp

    # DO NOT CHANGE CODE BELOW THIS LINE
    # =======================================================================
    def test (self):
        """
        -------------------------------------------------------
        Creates a string containing the type and value of all nodes in the list.
        Use: test_str = lst.test()
        -------------------------------------------------------
        Returns:
            test_str - a string containing the type and value of all nodes in the list (str)
        -------------------------------------------------------
        """
        out = ""
        node = self._front
        while node != None:
            out += f'{node.printin()}'
            node = node._next
        return out

    def print (self):
        """
        -------------------------------------------------------
        Creates a string containing the type and value of all nodes in the list with arrows between them.
        Use: print_str = lst.print()
        -------------------------------------------------------
        Returns:
            print_str - a string containing the type and value of all nodes in the list with arrows (str)
        -------------------------------------------------------
        """
        out = ""
        node = self._front
        while node != None:
            out += f'{node.printout()}'
            if (node._next != None):
                out += " -> "
            node = node._next
        return out

    def clean (self):
        """
        -------------------------------------------------------
        Removes all nodes from the list.
        Use: lst.clean()
        -------------------------------------------------------
        Returns:
            None
        -------------------------------------------------------
        """
        self._front = None
        self._rear = None
        self._count = 0


    def __init__(self):
        """
        -------------------------------------------------------
        Initializes an empty list.
        Use: lst = List()
        -------------------------------------------------------
        Returns:
            A new List object (List)
        -------------------------------------------------------
        """
        self._front = None
        self._rear = None
        self._count = 0



class _Node:
    def __init__(self, typ, value, next_):
        """
        -------------------------------------------------------
        Initializes a list node with a value and link to the next node.
        Use: node = _Node(typ, value, next_)
        -------------------------------------------------------
        Parameters:
            typ - the type of the new node (int: 0 for Skip, 1 for Jump, 2 for Hop)
            value - the value of the new node (any)
            next_ - another list node (_Node)
        Returns:
            A new _Node object (_Node)
        -------------------------------------------------------
        """
        self._type = typ
        self._value = deepcopy(value)
        self._next = next_

    def printout (self):
        """
        -------------------------------------------------------
        Creates a formatted string representation of the node including its type and value.
        Use: out_str = node.printout()
        -------------------------------------------------------
        Returns:
            out_str - a formatted string including the type and value of the node (str)
        -------------------------------------------------------
        """
        out = ""
        if self._type == 0:
            out += "{(Skip)"
        elif self._type == 1:
            out += "{(Jump)"
        elif self._type == 2:
            out += "{(Hop)"
        else:
            out += "{(ERROR)}"

        out += deepcopy(f', \"{self._value}\"')
        out += "}"
        return out

    def printin (self):
        """
        -------------------------------------------------------
        Creates a formatted string representation of the node including its type and value without brackets.
        Use: out_str = node.printin()
        -------------------------------------------------------
        Returns:
            out_str - a formatted string including the type and value of the node without brackets (str)
        -------------------------------------------------------
        """
        out = ""
        if self._type == 0:
            out += "s"
        elif self._type == 1:
            out += "j"
        elif self._type == 2:
            out += "h"
        else:
            out += "e"

        out += deepcopy(f'{self._value}')
        return out
